<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
    <node pkg="topic_tools" type="throttle" args="messages /zedCloudsTransformed 1.0 /zedCloudsTransformed05" name="throttle_node" output="screen" />
    <node pkg="octomap_server" type="check_rack.py" name="check_rack_node" output="screen" />
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="3.0" />
       
	    <param name="pointcloud_min_z" value="0.1"/>
        <param name="pointcloud_max_z" value="3.5"/>
        <param name="pointcloud_min_y" value="-4.0"/>
        <param name="pointcloud_max_y" value="-1.5"/>

        <param name="sensor_model/min" value="0.12"/>
        <param name="sensor_model/max" value="0.97"/>

        <param name="sensor_model/hit"   value="0.7" />
        <param name="sensor_model/miss"   value="0.4" />    

		<param name="latch"   value="false" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/zedCloudsTransformed05" />
	</node>
    <!-- Launch rviz display-->
	<node name="rviz" pkg="rviz" type="rviz" args="-d /home/jlew/octo.rviz" output="screen" />
</launch>
